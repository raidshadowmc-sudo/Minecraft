import discord
from discord.ext import commands, tasks
import asyncio
import aiohttp
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import json
import io
import base64

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Pillow –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
PIL_AVAILABLE = False
Image = None
ImageDraw = None
ImageFont = None

try:
    from PIL import Image, ImageDraw, ImageFont
    PIL_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow –∫–æ–º–∞–Ω–¥–æ–π: pip install Pillow")

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CLIENT_ID = os.getenv("CLIENT_ID")
WEBSITE_URL = os.getenv("WEBSITE_URL", "http://localhost:5000")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not CLIENT_ID:
    raise ValueError("‚ùå CLIENT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not WEBSITE_URL:
    raise ValueError("‚ùå WEBSITE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix=['!', '/'], intents=intents, help_command=None)

async def fetch_json(session, url, description):
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status != 200:
                print(f"–û—à–∏–±–∫–∞ {description}: HTTP {resp.status}")
                return None
            return await resp.json()
    except asyncio.TimeoutError:
        print(f"–û—à–∏–±–∫–∞ {description}: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ {description}: {e}")
    return None

def get_tier_color(tier):
    colors = {
        'S+': 0xff1744, 'S': 0xff5722,
        'A+': 0xff9800, 'A': 0xffc107,
        'B+': 0x4caf50, 'B': 0x2196f3,
        'C+': 0x9c27b0, 'C': 0x607d8b,
        'D': 0x795548
    }
    return colors.get(tier, 0x607d8b)

def get_skill_emojis(gamemode):
    emoji_maps = {
        'bedwars': ['‚öîÔ∏è', 'üî•', 'üß±', 'üß†'],
        'kitpvp': ['üéØ', '‚ù§Ô∏è', 'üèÉ', 'üìè'],
        'skywars': ['üîç', 'üß™', '‚ö´', 'üëä'],
        'bridgefight': ['‚úèÔ∏è', 'üåâ', 'üß†', '‚öîÔ∏è'],
        'sumo': ['üß†', '‚úã', '‚öôÔ∏è', 'üèÉ'],
        'fireball_fight': ['üõ°Ô∏è', 'üî•', 'üß†', '‚öîÔ∏è'],
        'bridge': ['‚è©', 'üõ°Ô∏è', 'üß†', '‚öîÔ∏è']
    }
    return emoji_maps.get(gamemode, ['‚≠ê', '‚≠ê', '‚≠ê', '‚≠ê'])

# Discord UI Components
class ASCENDView(discord.ui.View):
    def __init__(self, player_id, nickname, gamemode):
        super().__init__(timeout=300)
        self.player_id = player_id
        self.nickname = nickname
        self.gamemode = gamemode

    @discord.ui.button(label='–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', style=discord.ButtonStyle.primary, emoji='üéÆ')
    async def change_gamemode(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Simple gamemode rotation
        gamemodes = ['bedwars', 'kitpvp', 'skywars', 'bridgefight']
        current_index = gamemodes.index(self.gamemode) if self.gamemode in gamemodes else 0
        new_gamemode = gamemodes[(current_index + 1) % len(gamemodes)]
        
        await interaction.response.send_message(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ {new_gamemode}...", ephemeral=True)
        
        # Re-run ascend command with new gamemode
        try:
            async with aiohttp.ClientSession() as session:
                ascend_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{self.player_id}/ascend-data?gamemode={new_gamemode}", "–ø–æ–ª—É—á–µ–Ω–∏—è ASCEND –¥–∞–Ω–Ω—ã—Ö")
                if ascend_data and ascend_data.get('success'):
                    # Update the view
                    self.gamemode = new_gamemode
                    await interaction.edit_original_response(content=f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_gamemode}", view=self)
        except Exception as e:
            await interaction.edit_original_response(content="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞")

class QuestReviewView(discord.ui.View):
    def __init__(self, user_id, quest_name):
        super().__init__(timeout=3600)  # 1 hour timeout
        self.user_id = user_id
        self.quest_name = quest_name

    @discord.ui.button(label='–û–¥–æ–±—Ä–∏—Ç—å', style=discord.ButtonStyle.success, emoji='‚úÖ')
    async def approve_quest(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(f"‚úÖ –ö–≤–µ—Å—Ç **{self.quest_name}** –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{self.user_id}>")
        self.clear_items()
        await interaction.edit_original_response(view=self)

    @discord.ui.button(label='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', style=discord.ButtonStyle.danger, emoji='‚ùå')
    async def reject_quest(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(f"‚ùå –ö–≤–µ—Å—Ç **{self.quest_name}** –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{self.user_id}>")
        self.clear_items()
        await interaction.edit_original_response(view=self)

class EmbedBuilderModal(discord.ui.Modal, title="üé® –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    def __init__(self):
        super().__init__()

    title_input = discord.ui.TextInput(
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è...",
        max_length=256,
        required=True
    )
    
    description_input = discord.ui.TextInput(
        label="–û–ø–∏—Å–∞–Ω–∏–µ",
        placeholder="–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...",
        style=discord.TextStyle.paragraph,
        max_length=4000,
        required=True
    )
    
    color_input = discord.ui.TextInput(
        label="–¶–≤–µ—Ç (hex –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)",
        placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: #ff0000, red, 0xff0000",
        max_length=20,
        required=False,
        default="#3498db"
    )
    
    footer_input = discord.ui.TextInput(
        label="–ü–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É",
        placeholder="–¢–µ–∫—Å—Ç –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)...",
        max_length=2048,
        required=False
    )
    
    image_url_input = discord.ui.TextInput(
        label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        placeholder="https://example.com/image.png (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        max_length=2048,
        required=False
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ü–≤–µ—Ç–∞
            color_value = 0x3498db  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π
            if self.color_input.value:
                color_str = self.color_input.value.strip()
                try:
                    # Hex —Ü–≤–µ—Ç —Å #
                    if color_str.startswith('#'):
                        color_value = int(color_str[1:], 16)
                    # Hex —Ü–≤–µ—Ç —Å 0x
                    elif color_str.startswith('0x'):
                        color_value = int(color_str, 16)
                    # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
                    elif color_str.lower() in ['red', '–∫—Ä–∞—Å–Ω—ã–π']:
                        color_value = 0xff0000
                    elif color_str.lower() in ['green', '–∑–µ–ª–µ–Ω—ã–π']:
                        color_value = 0x00ff00
                    elif color_str.lower() in ['blue', '—Å–∏–Ω–∏–π']:
                        color_value = 0x0000ff
                    elif color_str.lower() in ['yellow', '–∂–µ–ª—Ç—ã–π']:
                        color_value = 0xffff00
                    elif color_str.lower() in ['purple', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π']:
                        color_value = 0x8b4fa5
                    else:
                        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ hex –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                        color_value = int(color_str, 16)
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    color_value = 0x3498db

            # –°–æ–∑–¥–∞–Ω–∏–µ embed
            embed = discord.Embed(
                title=self.title_input.value,
                description=self.description_input.value,
                color=color_value,
                timestamp=datetime.utcnow()
            )

            if self.footer_input.value:
                embed.set_footer(text=self.footer_input.value)

            if self.image_url_input.value:
                try:
                    embed.set_image(url=self.image_url_input.value)
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

            embed.set_author(name=f"–°–æ–∑–¥–∞–Ω–æ: {interaction.user.display_name}", icon_url=interaction.user.avatar.url if interaction.user.avatar else None)

            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
            view = EmbedActionView(embed)
            await interaction.response.send_message("‚ú® Embed —Å–æ–∑–¥–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", embed=embed, view=view, ephemeral=True)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ EmbedBuilderModal: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", ephemeral=True)

class EmbedActionView(discord.ui.View):
    def __init__(self, embed):
        super().__init__(timeout=300)
        self.embed = embed

    @discord.ui.button(label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª', style=discord.ButtonStyle.success, emoji='üì§')
    async def send_to_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.send_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
            await interaction.followup.send(embed=self.embed)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", ephemeral=True)

    @discord.ui.button(label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', style=discord.ButtonStyle.secondary, emoji='‚úèÔ∏è')
    async def edit_embed(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        modal = EmbedBuilderModal()
        modal.title_input.default = self.embed.title
        modal.description_input.default = self.embed.description
        await interaction.response.send_modal(modal)

    @discord.ui.button(label='–û—Ç–º–µ–Ω–∞', style=discord.ButtonStyle.danger, emoji='‚ùå')
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.edit_message(content="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ embed –æ—Ç–º–µ–Ω–µ–Ω–æ", embed=None, view=None)

@bot.event
async def on_ready():
    print(f'{bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    if bot.user:
        print(f'Bot ID: {bot.user.id}')
    await bot.change_presence(activity=discord.Game(name="Elite Squad ASCEND | /help"))

    # Start background tasks
    leaderboard_update.start()
    karma_monitor.start()
    auto_role_update.start()  # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π

    # Sync slash commands
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} slash-–∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

@tasks.loop(hours=1)
async def leaderboard_update():
    """Update bot status with current leaderboard info"""
    try:
        async with aiohttp.ClientSession() as session:
            stats = await fetch_json(session, f"{WEBSITE_URL}/api/stats", "–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            if stats and stats.get('total_players'):
                activity = discord.Game(name=f"Elite Squad | {stats['total_players']} –∏–≥—Ä–æ–∫–æ–≤")
                await bot.change_presence(activity=activity)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@tasks.loop(minutes=30)
async def karma_monitor():
    """Monitor players with low karma and send warnings"""
    try:
        async with aiohttp.ClientSession() as session:
            # Get players with low karma (< 20)
            players = await fetch_json(session, f"{WEBSITE_URL}/api/leaderboard?sort=reputation&limit=100", "–ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤")
            if players and players.get('players'):
                low_karma_players = [p for p in players['players'] if p.get('reputation', 0) < 20]

                if low_karma_players:
                    # Find main guild and general channel
                    for guild in bot.guilds:
                        general = discord.utils.get(guild.text_channels, name='general') or \
                                 discord.utils.get(guild.text_channels, name='main') or \
                                 discord.utils.get(guild.text_channels, name='chat') or \
                                 (guild.text_channels[0] if guild.text_channels else None)
                        if general and hasattr(general, 'send'):
                            embed = discord.Embed(
                                title="‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—Ä–º—ã",
                                description=f"–ù–∞–π–¥–µ–Ω–æ {len(low_karma_players)} –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º–æ–π",
                                color=0xff6b6b,
                                timestamp=datetime.utcnow()
                            )

                            karma_list = []
                            for player in low_karma_players[:5]:
                                karma_list.append(f"**{player['nickname']}** - –ö–∞—Ä–º–∞: {player.get('reputation', 0)}")

                            embed.add_field(name="–ò–≥—Ä–æ–∫–∏ —Å –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º–æ–π:", value="\n".join(karma_list), inline=False)
                            embed.add_field(name="–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º—ã:",
                                          value="‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —á–∞—Ç–µ\n‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –¥—Ä–æ–ø–∞ —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö",
                                          inline=False)

                            await general.send(embed=embed)
                        break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—Ä–º—ã: {e}")

@leaderboard_update.before_loop
async def before_leaderboard_update():
    await bot.wait_until_ready()

@karma_monitor.before_loop
async def before_karma_monitor():
    await bot.wait_until_ready()

# Bot Commands
@bot.tree.command(name="ascend", description="–ü–æ–∫–∞–∑–∞—Ç—å ASCEND –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
async def ascend_card(interaction: discord.Interaction, nickname: str, gamemode: str = "bedwars", visual: bool = False):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]
            player_id = player['id']

            ascend_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{player_id}/ascend-data?gamemode={gamemode}", "–ø–æ–ª—É—á–µ–Ω–∏—è ASCEND –¥–∞–Ω–Ω—ã—Ö")
            if not ascend_data or not ascend_data.get('success'):
                await interaction.followup.send("‚ùå ASCEND –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", ephemeral=True)
                return

            ascend = ascend_data['ascend']

        embed = discord.Embed(
            title="üéÆ ASCEND Performance Card",
            description=f"**{player['nickname']}** | –£—Ä–æ–≤–µ–Ω—å {player['level']} | {gamemode.title()}",
            color=get_tier_color(ascend['overall_tier']),
            timestamp=datetime.utcnow()
        )

        # Use dynamic skill names
        skill_emojis = get_skill_emojis(gamemode)
        skills = [
            (ascend.get('skill1_name', 'PVP'), ascend.get('skill1_tier', 'D'), ascend.get('skill1_score', 25)),
            (ascend.get('skill2_name', 'Clutching'), ascend.get('skill2_tier', 'D'), ascend.get('skill2_score', 25)),
            (ascend.get('skill3_name', 'Block Placement'), ascend.get('skill3_tier', 'D'), ascend.get('skill3_score', 25)),
            (ascend.get('skill4_name', 'Gamesense'), ascend.get('skill4_tier', 'D'), ascend.get('skill4_score', 25))
        ]

        for i, (name, tier, score) in enumerate(skills):
            emoji = skill_emojis[i] if i < len(skill_emojis) else "‚≠ê"
            embed.add_field(name=f"{emoji} {name}", value=f"**{tier}** ({score}/100)", inline=True)

        embed.add_field(name="üëë Overall", value=f"**{ascend['overall_tier']}** TIER", inline=True)

        avg_score = sum(skill[2] for skill in skills) / 4
        embed.add_field(name="üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", value=f"**{avg_score:.1f}/100**", inline=True)

        if ascend.get('global_rank'):
            embed.add_field(name="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥", value=f"**#{ascend['global_rank']}**", inline=True)

        if ascend.get('comment'):
            embed.add_field(name="üí¨ –û—Ü–µ–Ω–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞", value=f"*{ascend['comment'][:1000]}*", inline=False)

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text=f"–û—Ü–µ–Ω—â–∏–∫: {ascend.get('evaluator_name', 'Elite Squad')} | Elite Squad ASCEND")

        view = ASCENDView(player_id, player['nickname'], gamemode)
        await interaction.followup.send(embed=embed, view=view)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ascend: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ephemeral=True)

@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ –ö–æ–º–∞–Ω–¥—ã Elite Squad Bot v3.0",
        description="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
        color=0x9b59b6,
        timestamp=datetime.utcnow()
    )

    embed.add_field(
        name="üéÆ –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        value="""
        `/ascend <nickname> [gamemode] [visual]` - ASCEND –∫–∞—Ä—Ç–æ—á–∫–∞
        `/player <nickname>` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        """,
        inline=False
    )

    embed.add_field(
        name="üíú –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã",
        value="""
        `/karma [nickname]` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä–º–µ
        """,
        inline=False
    )

    embed.add_field(
        name="üõí –ú–∞–≥–∞–∑–∏–Ω –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        value="""
        `/shop [category]` - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞
        `/buy <item_name> [nickname]` - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
        `/inventory <nickname>` - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        `/apply <type> <name> [nickname]` - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        """,
        inline=False
    )

    embed.add_field(
        name="üìú –ö–≤–µ—Å—Ç—ã",
        value="""
        `/quests <nickname>` - –ö–≤–µ—Å—Ç—ã –∏–≥—Ä–æ–∫–∞
        `/submit_quest <name> [screenshot]` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        """,
        inline=False
    )
    
    embed.add_field(
        name="üé® –£—Ç–∏–ª–∏—Ç—ã",
        value="""
        `/embed` - –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """,
        inline=False
    )
    
    embed.add_field(
        name="üèÜ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π",
        value="""
        `/check_stats <nickname>` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞
        `/update_roles <nickname>` - –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏ (–∞–¥–º–∏–Ω)
        """,
        inline=False
    )

    embed.add_field(name="üéÆ –†–µ–∂–∏–º—ã –∏–≥—Ä—ã –¥–ª—è ASCEND",
                   value="bedwars, kitpvp, skywars, bridgefight, sumo, fireball_fight, bridge", inline=False)
    embed.add_field(name="üîó –°–∞–π—Ç", value=f"[–û—Ç–∫—Ä—ã—Ç—å Elite Squad]({WEBSITE_URL})", inline=False)

    embed.set_footer(text="Elite Squad ASCEND Bot v3.0 | –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è!")

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="karma", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä–º–µ –∏–≥—Ä–æ–∫–∞")
async def karma_info(interaction: discord.Interaction, nickname: str = ""):
    try:
        await interaction.response.defer()

        if not nickname or nickname == "":
            # Show general karma info
            embed = discord.Embed(
                title="üîÆ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã Elite Squad",
                description="–ö–∞—Ä–º–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç",
                color=0x8b4fa5,
                timestamp=datetime.utcnow()
            )

            embed.add_field(
                name="üíú –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–æ–π –∫–∞—Ä–º—ã (80+)",
                value="‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –¥—Ä–æ–ø —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–∞–º\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤ Discord",
                inline=False
            )

            embed.add_field(
                name="‚ö†Ô∏è –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º—ã (20-)",
                value="‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —á–∞—Ç–µ\n‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –¥—Ä–æ–ø–∞ —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                inline=False
            )

            embed.add_field(
                name="üìà –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—Ä–º—É",
                value="‚Ä¢ –ü–æ–±–µ–∂–¥–∞–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö\n‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã\n‚Ä¢ –ü–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ",
                inline=False
            )

            await interaction.followup.send(embed=embed)
            return

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]

        karma = player.get('reputation', 0)

        # Determine karma level and color
        if karma >= 80:
            level = "–í—ã—Å–æ–∫–∞—è"
            color = 0x00ff00
            emoji = "üíö"
        elif karma >= 50:
            level = "–°—Ä–µ–¥–Ω—è—è"
            color = 0xffff00
            emoji = "üíõ"
        elif karma >= 20:
            level = "–ù–∏–∑–∫–∞—è"
            color = 0xff8800
            emoji = "üß°"
        else:
            level = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
            color = 0xff0000
            emoji = "üíî"

        embed = discord.Embed(
            title=f"üîÆ –ö–∞—Ä–º–∞ –∏–≥—Ä–æ–∫–∞ {player['nickname']}",
            color=color,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üíú –¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞", value=f"**{karma}** {emoji}", inline=True)
        embed.add_field(name="üìä –£—Ä–æ–≤–µ–Ω—å", value=f"**{level}**", inline=True)
        embed.add_field(name="‚≠ê –ò–≥—Ä–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å", value=f"**{player['level']}**", inline=True)

        if karma < 20:
            embed.add_field(
                name="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                value="–£ –≤–∞—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –∫–∞—Ä–º–∞! –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç.",
                inline=False
            )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="–ö–∞—Ä–º–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ karma: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä–º—ã", ephemeral=True)

@bot.tree.command(name="shop", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤")
async def shop_command(interaction: discord.Interaction, category: str = "all"):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            # Get shop items
            shop_data = await fetch_json(session, f"{WEBSITE_URL}/api/shop", "–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞")
            if not shop_data or not shop_data.get('items'):
                await interaction.followup.send("‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", ephemeral=True)
                return

        items = shop_data['items']
        if category != "all":
            items = [item for item in items if item.get('category') == category]

        if not items:
            await interaction.followup.send(f"‚ùå –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True)
            return

        embed = discord.Embed(
            title="üõí –ú–∞–≥–∞–∑–∏–Ω Elite Squad",
            description=f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )

        # Show first 10 items
        for item in items[:10]:
            price_text = ""
            if item.get('price_coins', 0) > 0:
                price_text += f"üí∞ {item['price_coins']:,} –∫–æ–π–Ω–æ–≤"
            if item.get('price_reputation', 0) > 0:
                if price_text:
                    price_text += " | "
                price_text += f"üíú {item['price_reputation']} –∫–∞—Ä–º—ã"

            embed.add_field(
                name=f"{item.get('emoji', 'üì¶')} {item['display_name']}",
                value=f"{item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n**–¶–µ–Ω–∞:** {price_text}",
                inline=True
            )

        embed.add_field(
            name="üí° –ö–∞–∫ –∫—É–ø–∏—Ç—å",
            value=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/buy <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞>` –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: {WEBSITE_URL}/shop",
            inline=False
        )

        embed.set_footer(text="–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–π–Ω–∞—Ö –∏ –∫–∞—Ä–º–µ")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ shop: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", ephemeral=True)

@bot.tree.command(name="inventory", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞")
async def inventory_command(interaction: discord.Interaction, nickname: str):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]
            player_id = player['id']

            # Get inventory data
            inventory_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{player_id}/inventory", "–ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")

        embed = discord.Embed(
            title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {player['nickname']}",
            color=0x3498db,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üí∞ –ö–æ–π–Ω—ã", value=f"**{player.get('coins', 0):,}**", inline=True)
        embed.add_field(name="üíú –ö–∞—Ä–º–∞", value=f"**{player.get('reputation', 0)}**", inline=True)
        embed.add_field(name="‚≠ê –£—Ä–æ–≤–µ–Ω—å", value=f"**{player['level']}**", inline=True)

        # Show inventory items if available
        if inventory_data and inventory_data.get('success'):
            inventory = inventory_data.get('inventory', {})

            for category, items in inventory.items():
                if items:
                    items_text = []
                    for item_id, quantity in items.items():
                        items_text.append(f"‚Ä¢ ID {item_id}: x{quantity}")

                    embed.add_field(
                        name=f"üì¶ {category.title()}",
                        value="\n".join(items_text[:5]) + ("..." if len(items_text) > 5 else ""),
                        inline=True
                    )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ inventory: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è", ephemeral=True)

@bot.tree.command(name="buy", description="–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")
async def buy_command(interaction: discord.Interaction, item_name: str, player_nickname: str = ""):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ Discord –±–æ—Ç–∞"""
    try:
        await interaction.response.defer()
        
        # –ï—Å–ª–∏ –Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Discord username –∫–∞–∫ fallback
        if not player_nickname:
            player_nickname = interaction.user.display_name
        
        async with aiohttp.ClientSession() as session:
            # –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞
            player_data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={player_nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not player_data or not player_data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{player_nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return
            
            player = player_data['players'][0]
            player_id = player['id']
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
            purchase_response = await session.post(
                f"{WEBSITE_URL}/api/shop/purchase",
                json={
                    'player_id': player_id,
                    'item_name': item_name,
                    'discord_user_id': str(interaction.user.id)
                }
            )
            
            if purchase_response.status != 200:
                error_data = await purchase_response.json()
                await interaction.followup.send(f"‚ùå {error_data.get('message', '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏')}", ephemeral=True)
                return
            
            result = await purchase_response.json()
            
        # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
        embed = discord.Embed(
            title="‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
            description=f"**{player['nickname']}** –ø—Ä–∏–æ–±—Ä–µ–ª —Ç–æ–≤–∞—Ä **{result.get('item_name', item_name)}**",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(name="üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫–æ–π–Ω–æ–≤", value=f"{result.get('coins_spent', 0):,}", inline=True)
        embed.add_field(name="üíú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫–∞—Ä–º—ã", value=f"{result.get('reputation_spent', 0)}", inline=True)
        embed.add_field(name="üí° –°—Ç–∞—Ç—É—Å", value=result.get('message', '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'), inline=False)
        
        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —á–µ—Ä–µ–∑ /inventory")
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ buy: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞", ephemeral=True)

@bot.tree.command(name="embed", description="–°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ embed-—Å–æ–æ–±—â–µ–Ω–∏–µ")
async def embed_builder_command(interaction: discord.Interaction):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å embed-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embed
        modal = EmbedBuilderModal()
        await interaction.response.send_modal(modal)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ embed: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ embed-builder", ephemeral=True)

# === DISCORD ROLE SYSTEM ===

# –†–æ–ª–∏ Elite Squad –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ Bedwars
CLAN_ROLES = {
    # –ö–ª–∞–Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –æ—Ç –Ω–∏–∑—à–µ–π –∫ –≤—ã—Å—à–µ–π
    'Umi': {'min_kdr': 2.38, 'min_kills': 500, 'min_beds': 200, 'discord_role_name': '„ÄäFR„ÄãüáØüáµUmi ËªçÈöäüçô'},
    'Asigaro': {'min_kdr': 2.34, 'min_kills': 1000, 'min_beds': 400, 'discord_role_name': '„ÄäFR„ÄãüáØüáµAsigaro ËªçÈöäüçô'},
    'Yakuin': {'min_kdr': 2.2, 'min_kills': 1500, 'min_beds': 600, 'discord_role_name': '„ÄäFR„ÄãüáØüáµYakuin ËªçÈöäüçô'},
    'Ronin': {'min_kdr': 2.1, 'min_kills': 2000, 'min_beds': 800, 'discord_role_name': '„ÄäFR„ÄãüáØüáµRonin ËªçÈöäüçô'},
    'Samurai': {'min_kdr': 2.07, 'min_kills': 4000, 'min_beds': 1200, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSamurai ËªçÈöäüÄÑ'},
    'Kirito': {'min_kdr': 2.0, 'min_kills': 5000, 'min_beds': 1500, 'discord_role_name': '„ÄäFR„ÄãüáØüáµKirito ËªçÈöäüÄÑ'},
    'Gokenin': {'min_kdr': 1.97, 'min_kills': 6000, 'min_beds': 1800, 'discord_role_name': '„ÄäFR„ÄãüáØüáµGokeninËªçÈöäüé¥'},
    'Hatamoto': {'min_kdr': 1.93, 'min_kills': 7000, 'min_beds': 2100, 'discord_role_name': '„ÄäFR„ÄãüáØüáµHatamotoËªçÈöäüé¥'},
    'Semyo': {'min_kdr': 1.89, 'min_kills': 8000, 'min_beds': 2230, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSemyoËªçÈöäüé¥'},
    'Sekio': {'min_kdr': 1.82, 'min_kills': 9900, 'min_beds': 2470, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSekioËªçÈöäüé¥'},
    'SengokuJidai': {'min_kdr': 1.79, 'min_kills': 10900, 'min_beds': 2540, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSengoku-JidaiËªçÈöäüé¥'},
    'Shugodaimy': {'min_kdr': 1.73, 'min_kills': 11900, 'min_beds': 2920, 'discord_role_name': '„ÄäFR„ÄãüáØüáµShugo daimy≈çËªçÈöäüé¥'},
    'Daimyo': {'min_kdr': 1.7, 'min_kills': 12900, 'min_beds': 3260, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDaimyo Â∞ÜËªçüé¥'},
    'Tokygava': {'min_kdr': 1.68, 'min_kills': 13600, 'min_beds': 3960, 'discord_role_name': '„ÄäFR„ÄãüáØüáµTokygava Â∞ÜËªç‚õ©'},
    'Eshin': {'min_kdr': 1.63, 'min_kills': 14200, 'min_beds': 4120, 'discord_role_name': '„ÄäFR„ÄãüáØüáµEshin Â∞ÜËªç‚õ©'},
    'Shogun': {'min_kdr': 1.55, 'min_kills': 15555, 'min_beds': 4400, 'discord_role_name': '„ÄäFR„ÄãüáØüáµShogun Â∞ÜËªç‚õ©'},
    'Tenno': {'min_kdr': 1.42, 'min_kills': 18200, 'min_beds': 4990, 'discord_role_name': '„ÄäFR„ÄãüáØüáµTenno Â∞ÜËªçüíØ'},
    'Daisin': {'min_kdr': 1.37, 'min_kills': 20520, 'min_beds': 5320, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-sin Â∞ÜËªçüà¥'},
    'Daiti': {'min_kdr': 1.26, 'min_kills': 21720, 'min_beds': 5840, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-ti Â∞ÜËªçüà¥'},
    'Shogi': {'min_kdr': 1.21, 'min_kills': 22480, 'min_beds': 6000, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-gi Â∞ÜËªçüà≤'},
    'Daigi': {'min_kdr': 1.13, 'min_kills': 23540, 'min_beds': 6100, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-gi Â∞ÜËªçüà≤'},
    'Shoshin': {'min_kdr': 1.02, 'min_kills': 25000, 'min_beds': 6200, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSho-shin Â∞ÜËªç„äó'},
    'Daishin': {'min_kdr': 0.93, 'min_kills': 28730, 'min_beds': 7600, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-shin Â∞ÜËªç„äó'},
    'Shorai': {'min_kdr': 0.87, 'min_kills': 31185, 'min_beds': 10500, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSho-rai Â∞ÜËªç„äô'},
    'Dairai': {'min_kdr': 0.85, 'min_kills': 38700, 'min_beds': 13700, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-rai Â∞ÜËªç„äô'},
    'Shonin': {'min_kdr': 0.8, 'min_kills': 51300, 'min_beds': 26950, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSho-nin Â∞ÜËªçüâê'},
    'Dainin': {'min_kdr': 0.79, 'min_kills': 56000, 'min_beds': 28700, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-nin Â∞ÜËªçüâê'},
    'Shotoku': {'min_kdr': 0.76, 'min_kills': 81500, 'min_beds': 40000, 'discord_role_name': '„ÄäFR„ÄãüáØüáµSho-toku Â∞ÜËªçüàπ'},
    'Daitoku': {'min_kdr': 0.74, 'min_kills': 85000, 'min_beds': 43000, 'discord_role_name': '„ÄäFR„ÄãüáØüáµDai-toku Â∞ÜËªçüàπ'},
    'Hattori': {'min_kdr': 0.57, 'min_kills': 100000, 'min_beds': 50000, 'discord_role_name': '„ÄäFR„ÄãüáØüáµHATTORI Â∞ÜËªçüê±‚Äçüë§'}
}

# –ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —Ä–æ–ª–∏
PRESTIGE_ROLES = {
    'ClanCore': {'condition': 'clan_member_since', 'value': '2021-08-08', 'discord_role_name': '¬´üí¶¬ª –ò—Å—Ç–∏–Ω–Ω–∞—è –ï–¥–∏–Ω–∏—Ü–∞'},
    'Diamond': {'condition': 'special_recognition', 'discord_role_name': '¬´üíé¬ª –ù–µ–æ–≥—Ä–∞–Ω—ë–Ω–Ω—ã–π –ê–ª–º–∞–∑'},
    'Murderous': {'condition': 'total_kills', 'value': 40000, 'discord_role_name': '¬´üó°¬ª –ü–æ—Ç—Ä–∞—à–∏—Ç–µ–ª—å'},
    'Unstoppable': {'condition': 'low_hp_final_kill', 'discord_role_name': '¬´üóª¬ª –ù–µ—Å–æ–∫—Ä—É—à–∏–º—ã–π'},
    'TechnoCool': {'condition': 'moonwalk_blocks', 'value': 32, 'discord_role_name': '¬´üëü¬ª –¢–µ—Ö–Ω–æ-–î–µ–Ω—Å–µ—Ä'},
    'MonstaX': {'condition': 'kills_per_game', 'value': 120, 'discord_role_name': '¬´‚öî¬ª ùôºùôæùôΩùöÇùöÉùô∞ ùöá'},
    'Mindless': {'condition': 'no_emeralds_wins', 'value': 15, 'discord_role_name': '¬´üóø¬ª –ë–µ–∑ —Ä–∞—Å—Å—É–¥–∫–∞'},
    'Striker': {'condition': 'fireball_only_win', 'discord_role_name': '¬´‚õë¬ª –°—Ç—Ä–∞–π–∫–µ—Ä'}
}

def determine_clan_role(player_stats):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞–Ω–æ–≤—É—é —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    kdr = player_stats.get('kd_ratio', 0)
    kills = player_stats.get('kills', 0)
    beds = player_stats.get('beds_broken', 0)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç –≤—ã—Å—à–µ–π –∫ –Ω–∏–∑—à–µ–π)
    sorted_roles = sorted(CLAN_ROLES.items(), key=lambda x: x[1]['min_kdr'], reverse=True)
    
    for role_name, requirements in sorted_roles:
        if (kdr >= requirements['min_kdr'] and 
            kills >= requirements['min_kills'] and 
            beds >= requirements['min_beds']):
            return {
                'role_name': role_name,
                'discord_role_name': requirements['discord_role_name'],
                'type': 'clan',
                'requirements': requirements
            }
    
    return None

def check_prestige_roles(player_stats):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞"""
    earned_roles = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ü–æ—Ç—Ä–∞—à–∏—Ç–µ–ª—å
    total_kills = player_stats.get('kills', 0)
    if total_kills >= 40000:
        earned_roles.append({
            'role_name': 'Murderous',
            'discord_role_name': '¬´üó°¬ª –ü–æ—Ç—Ä–∞—à–∏—Ç–µ–ª—å',
            'type': 'prestige',
            'reason': f'40000+ —É–±–∏–π—Å—Ç–≤ ({total_kills})'
        })
    
    # –î—Ä—É–≥–∏–µ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —Ä–æ–ª–∏ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    # –ò—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    
    return earned_roles

def format_role_info(role_data, player_stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not role_data:
        return "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
    
    kdr = player_stats.get('kd_ratio', 0)
    kills = player_stats.get('kills', 0)
    beds = player_stats.get('beds_broken', 0)
    
    info = f"**{role_data['discord_role_name']}**\n"
    info += f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    info += f"‚Ä¢ KDR: **{kdr}** (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {role_data['requirements']['min_kdr']})\n"
    info += f"‚Ä¢ –£–±–∏–π—Å—Ç–≤–∞: **{kills}** (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {role_data['requirements']['min_kills']})\n"
    info += f"‚Ä¢ –ö—Ä–æ–≤–∞—Ç–∏: **{beds}** (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {role_data['requirements']['min_beds']})\n"
    
    return info

async def assign_discord_role(guild, member, role_name):
    """–í—ã–¥–∞—Ç—å Discord —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        role = discord.utils.get(guild.roles, name=role_name)
        if role:
            if role not in member.roles:
                await member.add_roles(role)
                return f"‚úÖ –†–æ–ª—å {role_name} –≤—ã–¥–∞–Ω–∞!"
            else:
                return f"‚ÑπÔ∏è –†–æ–ª—å {role_name} —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        else:
            return f"‚ùå –†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: {e}"

async def remove_discord_role(guild, member, role_name):
    """–£–¥–∞–ª–∏—Ç—å Discord —Ä–æ–ª—å —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        role = discord.utils.get(guild.roles, name=role_name)
        if role and role in member.roles:
            await member.remove_roles(role)
            return f"‚úÖ –†–æ–ª—å {role_name} —É–¥–∞–ª–µ–Ω–∞!"
        return f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏ {role_name}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}"

# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ ===

@bot.tree.command(name="check_stats", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏")
async def check_stats_command(interaction: discord.Interaction, nickname: str):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤–æ–π —Ä–æ–ª–∏
        clan_role = determine_clan_role(player)
        prestige_roles = check_prestige_roles(player)

        # –°–æ–∑–¥–∞–Ω–∏–µ embed
        embed = discord.Embed(
            title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–æ–ª–∏: {player['nickname']}",
            color=0x9b59b6,
            timestamp=datetime.utcnow()
        )

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        embed.add_field(
            name="üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"**KDR:** {player.get('kd_ratio', 0)}\n"
                  f"**–£–±–∏–π—Å—Ç–≤–∞:** {player.get('kills', 0):,}\n"
                  f"**–°–º–µ—Ä—Ç–∏:** {player.get('deaths', 0):,}\n"
                  f"**–ö—Ä–æ–≤–∞—Ç–∏:** {player.get('beds_broken', 0):,}\n"
                  f"**–£—Ä–æ–≤–µ–Ω—å:** {player.get('level', 1)}",
            inline=True
        )

        # –ö–ª–∞–Ω–æ–≤–∞—è —Ä–æ–ª—å
        if clan_role:
            embed.add_field(
                name="üëë –ö–ª–∞–Ω–æ–≤–∞—è —Ä–æ–ª—å",
                value=format_role_info(clan_role, player),
                inline=False
            )
        else:
            # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ä–æ–ª—å
            sorted_roles = sorted(CLAN_ROLES.items(), key=lambda x: x[1]['min_kdr'])
            next_role = None
            for role_name, requirements in sorted_roles:
                if (player.get('kd_ratio', 0) < requirements['min_kdr'] or 
                    player.get('kills', 0) < requirements['min_kills'] or 
                    player.get('beds_broken', 0) < requirements['min_beds']):
                    next_role = (role_name, requirements)
                    break
            
            if next_role:
                role_name, req = next_role
                missing_kdr = max(0, req['min_kdr'] - player.get('kd_ratio', 0))
                missing_kills = max(0, req['min_kills'] - player.get('kills', 0))
                missing_beds = max(0, req['min_beds'] - player.get('beds_broken', 0))
                
                embed.add_field(
                    name="‚¨ÜÔ∏è –°–ª–µ–¥—É—é—â–∞—è —Ä–æ–ª—å",
                    value=f"**{req['discord_role_name']}**\n"
                          f"–ù—É–∂–Ω–æ –µ—â–µ:\n"
                          f"‚Ä¢ KDR: +{missing_kdr:.2f}\n"
                          f"‚Ä¢ –£–±–∏–π—Å—Ç–≤–∞: +{missing_kills:,}\n"
                          f"‚Ä¢ –ö—Ä–æ–≤–∞—Ç–∏: +{missing_beds:,}",
                    inline=False
                )

        # –ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —Ä–æ–ª–∏
        if prestige_roles:
            roles_text = "\n".join([f"‚Ä¢ {role['discord_role_name']} - {role['reason']}" for role in prestige_roles])
            embed.add_field(
                name="‚≠ê –ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —Ä–æ–ª–∏",
                value=roles_text,
                inline=False
            )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="Elite Squad - –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ check_stats: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", ephemeral=True)

@bot.tree.command(name="update_roles", description="–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
async def update_roles_command(interaction: discord.Interaction, nickname: str, force: bool = False):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]

        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ Discord –ø–æ –Ω–∏–∫—É
        member = None
        for guild_member in interaction.guild.members:
            if guild_member.display_name.lower() == nickname.lower() or guild_member.name.lower() == nickname.lower():
                member = guild_member
                break

        if not member and not force:
            await interaction.followup.send(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ Discord —Å –Ω–∏–∫–æ–º `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `force=True` –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", ephemeral=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        clan_role = determine_clan_role(player)
        prestige_roles = check_prestige_roles(player)

        result_messages = []

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤–æ–π —Ä–æ–ª–∏
        if clan_role and member:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π
            old_clan_roles = [role for role in member.roles if any(clan_name in role.name for clan_name in CLAN_ROLES.keys())]
            for old_role in old_clan_roles:
                result = await remove_discord_role(interaction.guild, member, old_role.name)
                result_messages.append(result)

            # –í—ã–¥–∞—á–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
            result = await assign_discord_role(interaction.guild, member, clan_role['discord_role_name'])
            result_messages.append(result)

        # –í—ã–¥–∞—á–∞ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö —Ä–æ–ª–µ–π
        if prestige_roles and member:
            for prestige_role in prestige_roles:
                result = await assign_discord_role(interaction.guild, member, prestige_role['discord_role_name'])
                result_messages.append(result)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        embed = discord.Embed(
            title=f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: {player['nickname']}",
            color=0x00ff00 if member else 0xffaa00,
            timestamp=datetime.utcnow()
        )

        if clan_role:
            embed.add_field(
                name="üëë –ù–æ–≤–∞—è –∫–ª–∞–Ω–æ–≤–∞—è —Ä–æ–ª—å",
                value=clan_role['discord_role_name'],
                inline=False
            )

        if prestige_roles:
            roles_text = "\n".join([role['discord_role_name'] for role in prestige_roles])
            embed.add_field(
                name="‚≠ê –ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —Ä–æ–ª–∏",
                value=roles_text,
                inline=False
            )

        if result_messages:
            embed.add_field(
                name="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                value="\n".join(result_messages),
                inline=False
            )
        elif not member:
            embed.add_field(
                name="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                value="–£—á–∞—Å—Ç–Ω–∏–∫ Discord –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–æ–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                inline=False
            )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="Elite Squad - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ update_roles: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π", ephemeral=True)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
@tasks.loop(hours=6)  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
async def auto_role_update():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-50 –∏–≥—Ä–æ–∫–æ–≤
            leaderboard = await fetch_json(session, f"{WEBSITE_URL}/api/leaderboard?sort=experience&limit=50", "–ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
            if not leaderboard or not leaderboard.get('players'):
                return

            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π...")
            updated_count = 0

            for guild in bot.guilds:
                for player in leaderboard['players']:
                    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ Discord
                    member = None
                    for guild_member in guild.members:
                        if (guild_member.display_name.lower() == player['nickname'].lower() or 
                            guild_member.name.lower() == player['nickname'].lower()):
                            member = guild_member
                            break

                    if not member:
                        continue

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
                    clan_role = determine_clan_role(player)
                    if not clan_role:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å
                    has_correct_role = any(clan_role['discord_role_name'] == role.name for role in member.roles)
                    if has_correct_role:
                        continue

                    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π
                    old_clan_roles = [role for role in member.roles if any(clan_name in role.name for clan_name in CLAN_ROLES.keys())]
                    for old_role in old_clan_roles:
                        await remove_discord_role(guild, member, old_role.name)

                    # –í—ã–¥–∞—á–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
                    result = await assign_discord_role(guild, member, clan_role['discord_role_name'])
                    if "‚úÖ" in result:
                        updated_count += 1
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –¥–ª—è {player['nickname']}: {clan_role['discord_role_name']}")

            print(f"üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–ª–µ–π: {updated_count}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")

@auto_role_update.before_loop
async def before_auto_role_update():
    await bot.wait_until_ready()

def run_bot():
    try:
        bot.run(BOT_TOKEN)
    except discord.errors.LoginFailure:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    run_bot()